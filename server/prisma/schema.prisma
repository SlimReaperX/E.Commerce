// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//product
model Book {
  id          Int          @id @default(autoincrement())
  title       String
  price       Float
  description String
  inStock     Boolean
  isPopular   Boolean
  imgUrl      String
  orderItems  OrderItem[]
  // Add other fields specific to books
  BookInCart  BookInCart[]
}

// OrderItem
model OrderItem {
  id         Int    @id @default(autoincrement())
  quantity   Int
  totalPrice Float
  book       Book   @relation(fields: [bookId], references: [id])
  bookId     Int
  order      Order? @relation(fields: [orderId], references: [id])
  orderId    Int?
}

// users
model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String
  isAdmin  Boolean @default(false)
  cart     Cart?
  orders   Order[]
  // Add other fields specific to users
}

// orders
model Order {
  id         Int         @id @default(autoincrement())
  userId     Int
  orderDate  DateTime    @default(now())
  totalPrice Float
  status     OrderStatus // Define an enum for status
  isInCart   Boolean     @default(false)
  orderItems OrderItem[]
  user       User?       @relation(fields: [userId], references: [id])
  // Add other fields specific to orders
}

//cart
model Cart {
  id         Int          @id @default(autoincrement())
  userId     Int          @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  user       User?        @relation(fields: [userId], references: [id])
  BookInCart BookInCart[]
}

model BookInCart {
  id        Int      @id @default(autoincrement())
  cartId    Int
  bookId    Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  // Add other status options as needed
}

//
